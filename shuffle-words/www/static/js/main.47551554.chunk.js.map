{"version":3,"sources":["components/titleFormat.js","components/Header.js","components/InputWords.js","components/wordsOrder.js","components/ShowWords.js","components/Body.js","components/Footer.js","components/useAppStates.js","App.js","serviceWorker.js","index.js"],"names":["titleFormat","getFormatedTitle","title","undefined","newTitle","split","length","join","getUnFormatedTitle","Header","props","className","wordStatus","onClick","editIt","deleteIt","InputWords","dict","Object","assign","obj","words","state","content","onchange","event","value","target","setState","onchangeTitle","submitted","alert","window","confirm","localStorage","setItem","JSON","stringify","strWords","setWords","setTitle","setWordStatus","type","this","onChange","React","Component","wordsOrder","getRandomArray","array","len","num","min","max","ret","Math","floor","random","push","splice","getOrderedArray","sort","ShowWords","div","key","setKey","getDisplayArray","i","a","innerList","currentWords","map","list","word","Body","str","indexOf","trim","splitStr","Footer","buttons","keys","changeTitle","reverse","button","useAppStates","WORDS","parse","getItem","Common_Names","German_Alphabet","Commonly_Misspelled_Words","Greek_Alphabet","useState","App","oldTitle","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","renderReactDom","ReactDOM","render","document","getElementById","cordova","addEventListener","URL","process","href","origin","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.47551554.chunk.js","sourcesContent":["const titleFormat = {\n    getFormatedTitle : (title) => {\n        if (title === undefined) {\n            return ''\n        }\n        let newTitle = title.split('_');\n        if (newTitle.length === 1){\n            return title;\n        }\n        newTitle = newTitle.join(' ');\n        return newTitle;\n    },\n    getUnFormatedTitle : (title) => {\n        let newTitle = title.split(' ');\n        if (newTitle.length === 1){\n            return title;\n        }\n        newTitle = newTitle.join('_')\n        return newTitle;\n    }\n}\n\nexport default titleFormat;","import React from 'react';\nimport titleFormat from './titleFormat'\n\nconst Header = (props) => {\n    let title = titleFormat.getFormatedTitle(props.title)\n    return(\n      <div>\n        <h1 className=\"display-4\">Shuffle Words App</h1>\n        {\n        props.wordStatus !== 'Entering'? \n        <h4>{title}\n        <small onClick={() => props.editIt(props.title) }>edit</small>\n        <small onClick={() => props.deleteIt(props.title) }>delete</small>\n        </h4>\n        :\n        <div></div>\n        }\n        <hr/>\n      </div>\n    );\n  }\n\n\nexport default Header;","import React from 'react';\nimport titleFormat from './titleFormat'\n\nclass InputWords extends React.Component{\n    dict = Object.assign({}, this.props.obj.words);\n    state = {\n      title: this.props.obj.title === '' ? '': titleFormat.getFormatedTitle(this.props.obj.title),\n      content: this.props.obj.title === '' ? '': this.dict[this.props.obj.title],\n    };\n    \n    onchange= (event)=> {\n      let value = event.target.value;\n      this.setState({ content: value});\n    };\n    \n    onchangeTitle = (event) => {\n      let value = event.target.value;\n      this.setState({ title: value});\n    }\n  \n    submitted = () => {\n      let content = this.state.content;\n      let title = titleFormat.getUnFormatedTitle(this.state.title);\n      let dict = Object.assign({}, this.props.obj.words);\n      // title is not filled?\n      if (title === ''){\n          alert(\"Please Enter A Title!\");\n          return;\n      }\n      // content is not filled?\n      if (content === '' || content.split(',').length < 2){\n          alert(\"Please Enter Two or More Words Separated by Commas!\");\n          return;\n      }\n      \n      // this.props.obj.title present?\n      if (this.props.obj.title !== ''){\n          delete dict[this.props.obj.title]\n          // this.props.obj.deleteWords(this.props.obj.title)\n      }\n      else {\n        // title is used?\n        if (dict[title] !== undefined){\n        \n          const titleUsed = window.confirm('This title has already been used! Are you sure you wish to replace the content under this title?');\n          if (titleUsed === true){\n          }\n          else {\n              return;\n          }\n      }\n      }\n      // enter next page\n      dict[title]=content;\n      // this.props.obj.postWords(title,content)\n      localStorage.setItem('Words', JSON.stringify(dict))\n      let strWords = JSON.stringify(dict)\n      localStorage.setItem('WORDS', strWords)\n      this.props.obj.setWords(dict);\n      this.props.obj.setTitle(title);\n      this.setState({ content: ''});\n      this.setState({ title: ''});\n      this.props.obj.setWordStatus('Original');\n    }\n  \n    render(){\n      return (\n       <div>\n          <div className='help'>Separate Words by Commas, Please!</div>\n          <div className='question'>\n              <div className='labels'>Title:</div>\n              <input\n              type=\"text\"\n              value={this.state.title}\n              onChange={this.onchangeTitle}/>\n              <div className='labels'>Input Words: </div>\n              <textarea \n                type=\"text\"\n                value={this.state.content}\n                onChange={this.onchange}\n              />          \n          </div>\n           <button className='submit' onClick={this.submitted}>submit</button> \n       </div>\n      );\n    } \n  }\n\nexport default InputWords;","const wordsOrder = {\n    getRandomArray: (array) => {\n        let words = [...array];\n        let ret = [];\n        let len;\n        let num;\n        const getNum = (min, max) => {\n        let num = Math.floor(Math.random() * (max - min + 1) ) + min;\n        return num;\n        }\n        while (words.length !== 0){\n            len = words.length;\n            num = getNum(0,len-1);\n            ret.push(words[num]);\n            words.splice(num, 1);\n        }\n        return ret;\n    }\n    ,\n    getOrderedArray: (array) => {\n        let ret = [...array];\n        ret.sort();\n        return ret;\n    }\n}\n\nexport default wordsOrder;","import React from 'react';\nimport wordsOrder from './wordsOrder'\n\n\nconst ShowWords = (props) => {\n    let {key,setKey} = props.obj\n  \n    const shuffleUp = () => {\n      props.obj.setWordStatus('Shuffle');\n      setKey(key+1);\n    }\n    \n    const enterWords = () => {\n      props.obj.setTitle('')\n      props.obj.setWordStatus('Entering');\n      setKey(key+1);\n    }\n    \n    const orderWords = () => {\n      props.obj.setWordStatus('Order');\n      setKey(key+1);\n    }\n  \n    const originalWords = () => {\n      props.obj.setWordStatus('Original');\n      setKey(key+1);\n    }\n  \n    const getDisplayArray = (array) => {\n      let i;\n      let a;\n      let ret = [];\n      let innerList = [];\n      for (i=0;i<array.length;i+=4){\n        innerList = [];\n        for (a=i;a<i+4 && a<array.length;a++){\n          innerList.push(<li>{array[a]}</li>)\n        }\n        ret.push(innerList)\n      }\n      return ret;\n    }\n  \n    let div;\n    let array;\n    let lists = getDisplayArray(props.currentWords);\n    switch(props.obj.wordStatus) {\n      case 'Shuffle':\n        array = wordsOrder.getRandomArray(props.currentWords);\n        lists = getDisplayArray(array);\n        div = lists.map(list => <div className=\"row\">{list.map(word => <div className=\"col-lg-3 list\">{word}</div>)}</div>); \n        break;\n      case 'Order':\n        array = wordsOrder.getOrderedArray(props.currentWords);\n        lists = getDisplayArray(array);\n        div = lists.map(list => <div className=\"row\">{list.map(word => <div className=\"col-lg-3 list\">{word}</div>)}</div>); \n        break;\n      default:\n        lists = getDisplayArray(props.currentWords);\n        div = lists.map(list => <div className=\"row\">{list.map(word => <div className=\"col-lg-3 list\">{word}</div>)}</div>); \n    }\n  \n    return(\n      <div>\n        <ol>\n          {div}\n        </ol>\n        <div>\n          <button onClick={shuffleUp}>Shuffle</button>\n          <button onClick={orderWords}>Alphabetize</button>\n          <button onClick={originalWords}>Original Order</button>\n          <button onClick={enterWords}>Input Other Words</button>\n        </div>\n      </div>\n    );\n}\n\nexport default ShowWords;","import React from 'react';\nimport InputWords from './InputWords';\nimport ShowWords from './ShowWords'\n\nconst Body = (props) => {\n    let currentWords;\n    let div;\n    const splitStr = (str) => {\n        let words;\n        try {\n            words = str.split(',');\n            words.map(word => words[words.indexOf(word)] = word.trim());\n        }\n        catch {\n            words = []\n        }\n        return words;\n    }\n  \n    if (props.obj.title !== '' && props.obj.title !== undefined){\n      let str = props.obj.words[props.obj.title];\n      currentWords = splitStr(str);\n    }\n    \n    switch(props.obj.wordStatus) {\n      case 'Entering':\n          div = <InputWords obj={props.obj} currentWords={currentWords}/>\n          break;\n      default:\n          div = <ShowWords obj={props.obj} currentWords={currentWords}/>\n    }\n    \n    return (\n      <div>\n        {div}\n        <hr/>\n      </div>\n    );\n    \n  }\n\nexport default Body;","import React from 'react';\nimport titleFormat from './titleFormat'\n\nconst Footer = (props) => {\n\n    let buttons = [];\n    Object.keys(props.words).map(key => buttons.push(<button className='choices' onClick={() => props.changeTitle(key)}>{titleFormat.getFormatedTitle(key)}</button>));\n    buttons.reverse();\n  \n    return(\n      <div>\n        <h2>Common Choices</h2>\n        <hr/>\n        <div>\n          {buttons.map(button => button)}\n        </div>\n      </div>\n    )\n  }\n\nexport default Footer;","import {useState} from 'react';\n// import restfulMethods from './restfulMethods'\n\nconst useAppStates = () => {\n    let WORDS = JSON.parse(localStorage.getItem('WORDS'));\n    if (WORDS===null||undefined){\n      localStorage.setItem('WORDS', JSON.stringify({Common_Names: \"Alice, Henry, Helen, James, John, Peter, Anna, Robert, Jennifer, Michael, Linda, William, Elizabeth, David, Barbara, Richard, Susan, Joseph, Jessica\",German_Alphabet: \"a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, \\u00df, \\u00e4, \\u00f6, \\u00fc\",Commonly_Misspelled_Words: \"absence, accept, acceptable, accessible, accidentally, accommodate, achieved, acquainted, acquiescence, acquire, acquit, acknowledge, aerial, aggravate, agreeable, all right, alright, a lot, amateur, ambiguous, amendment, analysis, ancillary, apparent, appearance, approximate, argument, arrangement, ascend, atheist, baffled, beginning, benefited, believe, briefly, business, calculator, calendar, category, ceiling, cecemetery, changeable, chaotic, choice, colleagues, collectible, college, commission, commitment, committed, committee, companion, compensate, competitively, completely, concede, conceding, connoisseur, conscience, conscientious, conscious, consistent, convenient, correspondents, counterfeit, courteous, courtesy, criticism, crucial, dabble, debriefing, deceive, decipher, deficient, definite, definitely, description, desirable, deterrent, develop, disappear, disappointed, discipline, discrepancy, dissatisfied, dissertation, drunkenness, eccentric, econoomic, embarrass, embarrassment, emphasise, equipped, equipment, especially, essential, exaggerate, excellent, except, exercise, existence, expenses, extremely, exhilarate, exceed, existence, experience, faithfully, feasible, fiery, foreign, forfeit, forty, fourth, fulfilled, fulfilment, frivolous, gauge, generally, generalisation, government, grammar, grievance, grateful, guarantee, guardian, harass, height, hierarchy, ignorance, immediate, immediately, immensity, independent, indispensable, inoculate, intelligence, irrational, irrelevant, irreparable, judgement, kindly, knowledge, knowledgeable, leisure, liaise, library, lightning, maintenance, manoeuvre, mathematics, memento, millenium, miniature, minuscule, mischievous, miscellaneous, misspell, mationally, necessary, negotiate, niece, noticeable, occasion, occasionally, occupant, occur, occurred, occurrence, official, omission, omitted, parallel, particularly, parliament, pastime, permanenet, permutation, perserverance, pigeon, possession, precede, proferable, preference, preliminary, principal, principle, privilege, procedure, proceed, professor, proprietary, psychology, questionnaire, reasonable, receive, recommend, referred, reference, regrettable, relevant, relief, relieve, religious, repetition, restaurant, ridiculous, rhythm, sacrilegious, scandal, schedule, science, scissorrs, secretaries, sensible, separate, separately, seize, similar, sincerely, sovereign, special, stationary, stationery, success, supersede, surprising, tomorrow, transferred, twelfth, twentieth, tyranny, undoubtedly, unnecessary, until, unwritten, vacuum, vicious, visible, weather, weird, withdrawn, withhold\",Greek_Alphabet: \"\\u0391 \\u03b1, \\u0392 \\u03b2, \\u0393 \\u03b3, \\u0394 \\u03b4, \\u0395 \\u03b5, \\u0396 \\u03b6, \\u0397 \\u03b7, \\u0398 \\u03b8, \\u0399 \\u03b9, \\u039a \\u03ba, \\u039b \\u03bb, \\u039c \\u03bc, \\u039d \\u03bd, \\u039e \\u03be, \\u039f \\u03bf, \\u03a0 \\u03c0, \\u03a1 \\u03c1, \\u03a3 \\u03c3/\\u03c2, \\u03a4 \\u03c4, \\u03a5 \\u03c5, \\u03a6 \\u03c6, \\u03a7 \\u03c7, \\u03a8 \\u03c8, \\u03a9 \\u03c9\"}));\n      WORDS = JSON.parse(localStorage.getItem('WORDS'));\n    }\n    const [title, setTitle] = useState('');\n    const [words, setWords] = useState(WORDS);\n    const [key, setKey] = useState(1);\n    const [wordStatus, setWordStatus] = useState('Entering');\n\n    // localStorage.setItem('WORDS',JSON.stringify(words))\n    \n    // const setWordsfunc = async() => {\n    //   let ret = await restfulMethods.getWords();\n    //   if (Object.keys(words).length === 0){\n    //     setWords(ret);\n    //   }\n    // }\n    // setWordsfunc();\n\n    return {\n      title,\n      setTitle,\n      words,\n      setWords,\n      key,\n      setKey,\n      wordStatus,\n      setWordStatus,\n    };\n  }\n\nexport default useAppStates;","import React from 'react';\nimport Header from './components/Header'\nimport Body from './components/Body'\nimport Footer from './components/Footer'\nimport useAppStates from './components/useAppStates'\n// import restfulMethods from './components/restfulMethods'\n\n/*\nlet testObj = {\n  Commonly_Misspelled_Words: 'absence, accept, acceptable, accessible, accidentally, accommodate, achieved, acquainted, acquiescence, acquire, acquit, acknowledge, aerial, aggravate, agreeable, all right, alright, a lot, amateur, ambiguous, amendment, analysis, ancillary, apparent, appearance, approximate, argument, arrangement, ascend, atheist, baffled, beginning, benefited, believe, briefly, business, calculator, calendar, category, ceiling, cecemetery, changeable, chaotic, choice, colleagues, collectible, college, commission, commitment, committed, committee, companion, compensate, competitively, completely, concede, conceding, connoisseur, conscience, conscientious, conscious, consistent, convenient, correspondents, counterfeit, courteous, courtesy, criticism, crucial, dabble, debriefing, deceive, decipher, deficient, definite, definitely, description, desirable, deterrent, develop, disappear, disappointed, discipline, discrepancy, dissatisfied, dissertation, drunkenness, eccentric, econoomic, embarrass, embarrassment, emphasise, equipped, equipment, especially, essential, exaggerate, excellent, except, exercise, existence, expenses, extremely, exhilarate, exceed, existence, experience, faithfully, feasible, fiery, foreign, fordfeit, forty, fourth, fulfilled, fulfilment, frivolous, gauge, generally, generalisation, government, grammar, grievance, grateful, guarantee, guardian harrass, height, hierarchy ignorance, immediate, immediate.y immensity, independent, indispensable, inoculate, intelligence, irrational, irrelevant, irreparable, judgement, kindly, knowledge, knowledgeable, leisure, liaise, library, lightning, maitenance, manoeuvre, mathematics, memento, millenium, miniature, minuscule, mischievous, miscellaneous, misspell, mationally, necessary, negotiate, niece, noticeable, occasion, occasionally, occupant, occur, occurred, occurrence, official, omission, omitted, parallel, particularly, parliament, pastime, permanenet, permutation, perserverance, pigeon, possession, precede proferable, preference, preliminary, principal, principle, privilege, procedure, proceed, professor, proprietary, psychology, questionnaire, reasonable, receive, recommend, referred, reference, regrettable, relevant, relief, relieve, religious, repetition, restaurant, ridiculous, rhythm, sacrilegious, sandal schedule, science, scissorrs, secretaries, sensible, separate, separately, seize, similar, sincerely, sovereign, special, stationary, stationery, success, supersede, surprising, tomorrow, transferred, twelfth, twentieth, tyranny, undoubtedly, unnecessary, until, unwritten, vacuum, vicious, visible, weather, weird, withdrawn, withhold',\n  Common_Names: 'Alice, Henry, Helen, James, John, Peter, Anna, Robert, Jennifer, Michael, Linda, William, Elizabeth, David,\tBarbara, Richard, Susan, Joseph, Jessica',\n  English_Alphabet: 'a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z',\n  English_Capital_Letters: 'A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z',\n  Greek_Alphabet: 'Α α, Β β, Γ γ, Δ δ, Ε ε, Ζ ζ, Η η, Θ θ, Ι ι, Κ κ, Λ λ, Μ μ, Ν ν, Ξ ξ, Ο ο, Π π, Ρ ρ, Σ σ/ς, Τ τ, Υ υ, Φ φ, Χ χ, Ψ ψ, Ω ω',\n  German_Alphabet: 'a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, ß, ä, ö, ü',\n};\n*/\n\nfunction App(props) {\n  const {\n    title,\n    setTitle,\n    words,\n    setWords,\n    key,\n    setKey,\n    wordStatus,\n    setWordStatus,\n  } = useAppStates();\n\n  // let {\n  //   postWords,\n  //   deleteWords\n  // } = restfulMethods;\n\n  const obj = {\n    setWords,\n    words,\n    setTitle,\n    title,\n    setKey,\n    key,\n    setWordStatus,\n    wordStatus,\n    // postWords,\n    // deleteWords,\n  };\n\n  const changeTitle = (newTitle) => {\n      setTitle(newTitle);\n      setWordStatus(\"Original\");\n      setKey(key + 1);\n  }\n\n  const editIt = (newTitle) => {\n      setTitle(newTitle);\n      setWordStatus(\"Entering\");\n      setKey(key + 1);\n  }\n\n  const deleteIt = (oldTitle) => {\n    // restfulMethods.deleteWords(oldTitle);\n    const deleteConfirm = window.confirm('Are you sure you want to delete this set of words?');\n    if (deleteConfirm === true){\n      let dict = Object.assign({}, words);\n      delete dict[oldTitle]\n      localStorage.setItem('WORDS', JSON.stringify(dict))\n      setWords(dict)\n      setTitle('');\n      setWordStatus(\"Entering\");\n      setKey(key + 1);\n    }else{\n    }\n}\n\n  return(\n      <div className=\"container\" >\n        <Header title={title} editIt={editIt} deleteIt={deleteIt} wordStatus={wordStatus}/>\n        <Body obj={obj} key={key}/>\n        <Footer words={words} changeTitle={changeTitle}/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}